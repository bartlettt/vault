### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
# Orb 'circleci/slack@3.2.0' resolved to 'circleci/slack@3.2.0'
version: 2
jobs:
  bundle-releases:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - run:
        command: make -C packages*.lock write-all-package-cache-keys
        name: Write package cache key
    - restore_cache:
        key: cache001-package-74ce47808979cd113b983ab9f5ea6e76a9ab1d01-{{checksum ".buildcache/cache-keys/package-74ce47808979cd113b983ab9f5ea6e76a9ab1d01"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 74ce47808979cd113b983ab9f5ea6e76a9ab1d01
        name: Write package metadata for darwin_386_package
    - restore_cache:
        key: cache001-package-0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb-{{checksum ".buildcache/cache-keys/package-0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb
        name: Write package metadata for darwin_amd64_package
    - restore_cache:
        key: cache001-package-0fb58632af5e41b27fcbe91275700e3b43ec0a07-{{checksum ".buildcache/cache-keys/package-0fb58632af5e41b27fcbe91275700e3b43ec0a07"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 0fb58632af5e41b27fcbe91275700e3b43ec0a07
        name: Write package metadata for freebsd_386_package
    - restore_cache:
        key: cache001-package-efbf32a96b5e0b8612becb561935a89e7a4f837d-{{checksum ".buildcache/cache-keys/package-efbf32a96b5e0b8612becb561935a89e7a4f837d"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: efbf32a96b5e0b8612becb561935a89e7a4f837d
        name: Write package metadata for freebsd_amd64_package
    - restore_cache:
        key: cache001-package-550db36b1278e18787b284e3195d66ee17c13735-{{checksum ".buildcache/cache-keys/package-550db36b1278e18787b284e3195d66ee17c13735"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 550db36b1278e18787b284e3195d66ee17c13735
        name: Write package metadata for freebsd_arm_package
    - restore_cache:
        key: cache001-package-1f94336fabc078dab84da08ec463a5618e925d68-{{checksum ".buildcache/cache-keys/package-1f94336fabc078dab84da08ec463a5618e925d68"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 1f94336fabc078dab84da08ec463a5618e925d68
        name: Write package metadata for linux_386_package
    - restore_cache:
        key: cache001-package-f4a6ec31db808f00d3a173f90c496f7dfabe7744-{{checksum ".buildcache/cache-keys/package-f4a6ec31db808f00d3a173f90c496f7dfabe7744"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: f4a6ec31db808f00d3a173f90c496f7dfabe7744
        name: Write package metadata for linux_amd64_package
    - restore_cache:
        key: cache001-package-79df9841b4b8d3bd121ac7096cbc60f67c726195-{{checksum ".buildcache/cache-keys/package-79df9841b4b8d3bd121ac7096cbc60f67c726195"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 79df9841b4b8d3bd121ac7096cbc60f67c726195
        name: Write package metadata for linux_arm_package
    - restore_cache:
        key: cache001-package-e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b-{{checksum ".buildcache/cache-keys/package-e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b
        name: Write package metadata for linux_arm64_package
    - restore_cache:
        key: cache001-package-d6eb414747fa37bf009fb14cb2abefccb32984b5-{{checksum ".buildcache/cache-keys/package-d6eb414747fa37bf009fb14cb2abefccb32984b5"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: d6eb414747fa37bf009fb14cb2abefccb32984b5
        name: Write package metadata for netbsd_386_package
    - restore_cache:
        key: cache001-package-32a45ba7cca38d33e02be51ffe6078c9ad1478a0-{{checksum ".buildcache/cache-keys/package-32a45ba7cca38d33e02be51ffe6078c9ad1478a0"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 32a45ba7cca38d33e02be51ffe6078c9ad1478a0
        name: Write package metadata for netbsd_amd64_package
    - restore_cache:
        key: cache001-package-5a22ecae4775c3e6866e04c989146d30f503754d-{{checksum ".buildcache/cache-keys/package-5a22ecae4775c3e6866e04c989146d30f503754d"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 5a22ecae4775c3e6866e04c989146d30f503754d
        name: Write package metadata for openbsd_386_package
    - restore_cache:
        key: cache001-package-2499e2d82e7efa9908c881865926891ff419c577-{{checksum ".buildcache/cache-keys/package-2499e2d82e7efa9908c881865926891ff419c577"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 2499e2d82e7efa9908c881865926891ff419c577
        name: Write package metadata for openbsd_amd64_package
    - restore_cache:
        key: cache001-package-f14fbc01240ce212b6cfd230ea9910b6fb80ce83-{{checksum ".buildcache/cache-keys/package-f14fbc01240ce212b6cfd230ea9910b6fb80ce83"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: f14fbc01240ce212b6cfd230ea9910b6fb80ce83
        name: Write package metadata for solaris_amd64_package
    - restore_cache:
        key: cache001-package-19efbe8a35fb4a8acf643449dc26d44c03711510-{{checksum ".buildcache/cache-keys/package-19efbe8a35fb4a8acf643449dc26d44c03711510"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 19efbe8a35fb4a8acf643449dc26d44c03711510
        name: Write package metadata for windows_386_package
    - restore_cache:
        key: cache001-package-a352ff03d5a829952398fcabc99230b6a9488f95-{{checksum ".buildcache/cache-keys/package-a352ff03d5a829952398fcabc99230b6a9488f95"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: a352ff03d5a829952398fcabc99230b6a9488f95
        name: Write package metadata for windows_amd64_package
    - run:
        command: make aliases
        name: Write package aliases
    - run:
        command: ls -lahR .buildcache
        name: List Build Cache
    - run:
        command: cp packages*.lock/pkgs.yml lockfile-standalone.yml
    - store_artifacts:
        destination: lockfile-standalone.yml
        path: lockfile-standalone.yml
    - store_artifacts:
        destination: packages-standalone
        path: .buildcache/packages
    - run:
        command: tar -czf packages-standalone.tar.gz .buildcache/packages lockfile-standalone.yml
    - store_artifacts:
        destination: packages-standalone.tar.gz
        path: packages-standalone.tar.gz
    - run:
        command: tar -czf meta-standalone.tar.gz .buildcache/packages/store/*.json lockfile-standalone.yml
    - store_artifacts:
        destination: meta-standalone.tar.gz
        path: meta-standalone.tar.gz
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
  darwin_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb-{{checksum ".buildcache/cache-keys/package-0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_ddbb_{{checksum ".buildcache/cache-keys/copy-source-ddbb542a86e84e8293cc7627c3925e33651c0ecb"}}
        - cache001-warm-go-build-vendor-cache_de1d_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-de1d44767bbc6a5c2bee1d7fd74fff15472a674f"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb-{{checksum ".buildcache/cache-keys/package-0a6e58f4bcb1efbb1895a3dac7c8dec019a0b9bb"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-de1d44767bbc6a5c2bee1d7fd74fff15472a674f.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-de1d44767bbc6a5c2bee1d7fd74fff15472a674f-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_de1d_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-de1d44767bbc6a5c2bee1d7fd74fff15472a674f"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-de1d44767bbc6a5c2bee1d7fd74fff15472a674f.tar.gz
  windows_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 19efbe8a35fb4a8acf643449dc26d44c03711510
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-19efbe8a35fb4a8acf643449dc26d44c03711510-{{checksum ".buildcache/cache-keys/package-19efbe8a35fb4a8acf643449dc26d44c03711510"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_43cd_{{checksum ".buildcache/cache-keys/copy-source-43cd1e22eb22d1cb46875f3084f7a0114bc08de7"}}
        - cache001-warm-go-build-vendor-cache_3d2d_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-3d2da534455d043c6e108757337644caf6f0397f"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-19efbe8a35fb4a8acf643449dc26d44c03711510-{{checksum ".buildcache/cache-keys/package-19efbe8a35fb4a8acf643449dc26d44c03711510"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-3d2da534455d043c6e108757337644caf6f0397f.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-3d2da534455d043c6e108757337644caf6f0397f-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_3d2d_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-3d2da534455d043c6e108757337644caf6f0397f"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-3d2da534455d043c6e108757337644caf6f0397f.tar.gz
  install-ui-dependencies:
    docker:
    - image: node:10-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - run:
        command: |
          cd ui
          yarn install
          npm rebuild node-sass
        name: Install UI dependencies
    - save_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
        paths:
        - ui/node_modules
  linux_arm64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b-{{checksum ".buildcache/cache-keys/package-e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_61b4_{{checksum ".buildcache/cache-keys/copy-source-61b4712f869a24390334eac79f07bf9ebc52c079"}}
        - cache001-warm-go-build-vendor-cache_8c82_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-8c822ba5ee063d652dff9e789f153a6b162c50c9"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b-{{checksum ".buildcache/cache-keys/package-e0b2b5f76c3ed9eea4a06853828eed3bd1c5447b"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-8c822ba5ee063d652dff9e789f153a6b162c50c9.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-8c822ba5ee063d652dff9e789f153a6b162c50c9-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_8c82_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-8c822ba5ee063d652dff9e789f153a6b162c50c9"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-8c822ba5ee063d652dff9e789f153a6b162c50c9.tar.gz
  test-ui:
    docker:
    - image: node:10-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    resource_class: medium+
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - attach_workspace:
        at: .
    - run:
        command: |
          set -x

          # Install Chrome
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub \
            | apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" \
            | tee /etc/apt/sources.list.d/google-chrome.list
          apt-get update
          apt-get -y install google-chrome-stable
          rm /etc/apt/sources.list.d/google-chrome.list
          rm -rf /var/lib/apt/lists/* /var/cache/apt/*

          # Add ./bin to the PATH so vault binary can be run by Ember tests
          export PATH="${PWD}/bin:${PATH}"

          # Run Ember tests
          cd ui
          mkdir -p test-results/qunit
          yarn test:oss
        name: Test UI
    - store_artifacts:
        path: ui/test-results
    - store_test_results:
        path: ui/test-results
  linux_arm_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 79df9841b4b8d3bd121ac7096cbc60f67c726195
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-79df9841b4b8d3bd121ac7096cbc60f67c726195-{{checksum ".buildcache/cache-keys/package-79df9841b4b8d3bd121ac7096cbc60f67c726195"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_0dc4_{{checksum ".buildcache/cache-keys/copy-source-0dc4d48388cda33981d3042df49ff104de38c945"}}
        - cache001-warm-go-build-vendor-cache_9d70_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-9d70035da36fbdc323b06ada10daf58e6d189193"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-79df9841b4b8d3bd121ac7096cbc60f67c726195-{{checksum ".buildcache/cache-keys/package-79df9841b4b8d3bd121ac7096cbc60f67c726195"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-9d70035da36fbdc323b06ada10daf58e6d189193.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-9d70035da36fbdc323b06ada10daf58e6d189193-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_9d70_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-9d70035da36fbdc323b06ada10daf58e6d189193"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-9d70035da36fbdc323b06ada10daf58e6d189193.tar.gz
  test-ui-browserstack:
    docker:
    - image: node:10-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    resource_class: medium+
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - attach_workspace:
        at: .
    - run:
        command: |
          # Add ./bin to the PATH so vault binary can be found.
          export PATH="${PWD}"/bin:${PATH}
          make test-ui-browserstack
        name: Run Browserstack Tests
  darwin_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 74ce47808979cd113b983ab9f5ea6e76a9ab1d01
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-74ce47808979cd113b983ab9f5ea6e76a9ab1d01-{{checksum ".buildcache/cache-keys/package-74ce47808979cd113b983ab9f5ea6e76a9ab1d01"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_8e3e_{{checksum ".buildcache/cache-keys/copy-source-8e3e42cafea97e9cbcaed67fbd15787d255207ba"}}
        - cache001-warm-go-build-vendor-cache_1222_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-12225c8ef68cd05d75b164681c9d0463a7a98f80"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-74ce47808979cd113b983ab9f5ea6e76a9ab1d01-{{checksum ".buildcache/cache-keys/package-74ce47808979cd113b983ab9f5ea6e76a9ab1d01"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-12225c8ef68cd05d75b164681c9d0463a7a98f80.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-12225c8ef68cd05d75b164681c9d0463a7a98f80-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_1222_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-12225c8ef68cd05d75b164681c9d0463a7a98f80"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-12225c8ef68cd05d75b164681c9d0463a7a98f80.tar.gz
  build-go-dev:
    machine: true
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: |
          # Move dev UI assets to expected location
          rm -rf ./pkg
          mkdir ./pkg

          # Build dev binary
          make ci-bootstrap dev
        name: Build dev binary
    - persist_to_workspace:
        paths:
        - bin
        root: .
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.14.7
    - GO111MODULE: 'off'
    - GOTESTSUM_VERSION: 0.5.2
  algolia-index:
    docker:
    - image: node:12
    steps:
    - checkout
    - run:
        command: |
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/vault.git" ]; then
            echo "Not Vault OSS Repo, not indexing Algolia"
            exit 0
          fi
          cd website/
          npm install
          node scripts/index_search_content.js
        name: Push content to Algolia Index
  linux_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 1f94336fabc078dab84da08ec463a5618e925d68
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-1f94336fabc078dab84da08ec463a5618e925d68-{{checksum ".buildcache/cache-keys/package-1f94336fabc078dab84da08ec463a5618e925d68"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_d1ed_{{checksum ".buildcache/cache-keys/copy-source-d1eda11bb6005d29e8fc1b1aae490c510bd9630b"}}
        - cache001-warm-go-build-vendor-cache_43c0_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-43c09371aa7dbe6338751a3045adc513aaf0630e"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-1f94336fabc078dab84da08ec463a5618e925d68-{{checksum ".buildcache/cache-keys/package-1f94336fabc078dab84da08ec463a5618e925d68"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-43c09371aa7dbe6338751a3045adc513aaf0630e.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-43c09371aa7dbe6338751a3045adc513aaf0630e-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_43c0_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-43c09371aa7dbe6338751a3045adc513aaf0630e"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-43c09371aa7dbe6338751a3045adc513aaf0630e.tar.gz
  test-go-remote-docker:
    docker:
    - image: circleci/golang:1.14.7-stretch
    resource_class: large
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/go/src/github.com/hashicorp/vault/test-results .
          docker cp testcontainer:/tmp/gocache /tmp/go-cache
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  freebsd_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 0fb58632af5e41b27fcbe91275700e3b43ec0a07
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-0fb58632af5e41b27fcbe91275700e3b43ec0a07-{{checksum ".buildcache/cache-keys/package-0fb58632af5e41b27fcbe91275700e3b43ec0a07"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_8a1a_{{checksum ".buildcache/cache-keys/copy-source-8a1a3464487dd0bf35500ee7fa2af199177f9280"}}
        - cache001-warm-go-build-vendor-cache_5fd9_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-5fd9c57c4ce3c581aa8b745a9ae7f664d49ef0bd"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-0fb58632af5e41b27fcbe91275700e3b43ec0a07-{{checksum ".buildcache/cache-keys/package-0fb58632af5e41b27fcbe91275700e3b43ec0a07"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-5fd9c57c4ce3c581aa8b745a9ae7f664d49ef0bd.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-5fd9c57c4ce3c581aa8b745a9ae7f664d49ef0bd-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_5fd9_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-5fd9c57c4ce3c581aa8b745a9ae7f664d49ef0bd"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-5fd9c57c4ce3c581aa8b745a9ae7f664d49ef0bd.tar.gz
  test-go-race:
    docker:
    - image: circleci/golang:1.14.7-stretch
    resource_class: xlarge
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  freebsd_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: efbf32a96b5e0b8612becb561935a89e7a4f837d
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-efbf32a96b5e0b8612becb561935a89e7a4f837d-{{checksum ".buildcache/cache-keys/package-efbf32a96b5e0b8612becb561935a89e7a4f837d"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_69ea_{{checksum ".buildcache/cache-keys/copy-source-69ea2ad7874ada6cafc06bac7b9f757637f18be6"}}
        - cache001-warm-go-build-vendor-cache_ba12_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-ba120951c1306c9e4be089f6a267770188cfc32a"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-efbf32a96b5e0b8612becb561935a89e7a4f837d-{{checksum ".buildcache/cache-keys/package-efbf32a96b5e0b8612becb561935a89e7a4f837d"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-ba120951c1306c9e4be089f6a267770188cfc32a.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-ba120951c1306c9e4be089f6a267770188cfc32a-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_ba12_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-ba120951c1306c9e4be089f6a267770188cfc32a"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-ba120951c1306c9e4be089f6a267770188cfc32a.tar.gz
  openbsd_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 5a22ecae4775c3e6866e04c989146d30f503754d
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-5a22ecae4775c3e6866e04c989146d30f503754d-{{checksum ".buildcache/cache-keys/package-5a22ecae4775c3e6866e04c989146d30f503754d"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_5481_{{checksum ".buildcache/cache-keys/copy-source-54812d13c3878c6e2dfe7812dcdb38c5b2ee5fa1"}}
        - cache001-warm-go-build-vendor-cache_4d73_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-4d73d38a30a1b37ceef70beb8bea91548b85ba16"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-5a22ecae4775c3e6866e04c989146d30f503754d-{{checksum ".buildcache/cache-keys/package-5a22ecae4775c3e6866e04c989146d30f503754d"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-4d73d38a30a1b37ceef70beb8bea91548b85ba16.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-4d73d38a30a1b37ceef70beb8bea91548b85ba16-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_4d73_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-4d73d38a30a1b37ceef70beb8bea91548b85ba16"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-4d73d38a30a1b37ceef70beb8bea91548b85ba16.tar.gz
  linux_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: f4a6ec31db808f00d3a173f90c496f7dfabe7744
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-f4a6ec31db808f00d3a173f90c496f7dfabe7744-{{checksum ".buildcache/cache-keys/package-f4a6ec31db808f00d3a173f90c496f7dfabe7744"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_edbb_{{checksum ".buildcache/cache-keys/copy-source-edbbba9a1e85771560a86a51083858bc4910e5e6"}}
        - cache001-warm-go-build-vendor-cache_cddc_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-cddc5cc60d97c8b286509284601eb88e5cc1b81b"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-f4a6ec31db808f00d3a173f90c496f7dfabe7744-{{checksum ".buildcache/cache-keys/package-f4a6ec31db808f00d3a173f90c496f7dfabe7744"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-cddc5cc60d97c8b286509284601eb88e5cc1b81b.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-cddc5cc60d97c8b286509284601eb88e5cc1b81b-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_cddc_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-cddc5cc60d97c8b286509284601eb88e5cc1b81b"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-cddc5cc60d97c8b286509284601eb88e5cc1b81b.tar.gz
  website-docker-image:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - setup_remote_docker
    - run:
        command: |
          IMAGE_TAG="$(git rev-list -n1 HEAD -- website/Dockerfile website/package-lock.json)"
          echo "Using $IMAGE_TAG"
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/vault.git" ]; then
            echo "Not Vault OSS Repo, not building website docker image"
          elif curl https://hub.docker.com/v2/repositories/hashicorp/vault-website/tags/$IMAGE_TAG -fsL > /dev/null; then
              echo "Dependencies have not changed, not building a new website docker image."
          else
              cd website/
              docker build -t hashicorp/vault-website:$IMAGE_TAG .
              docker tag hashicorp/vault-website:$IMAGE_TAG hashicorp/vault-website:latest
              docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
              docker push hashicorp/vault-website
          fi
        name: Build Docker Image if Necessary
  solaris_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: f14fbc01240ce212b6cfd230ea9910b6fb80ce83
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-f14fbc01240ce212b6cfd230ea9910b6fb80ce83-{{checksum ".buildcache/cache-keys/package-f14fbc01240ce212b6cfd230ea9910b6fb80ce83"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_e491_{{checksum ".buildcache/cache-keys/copy-source-e4919d12d4d579429115ce132f66aaa67c92509e"}}
        - cache001-warm-go-build-vendor-cache_a8f7_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-a8f76a62481f2ca9cda207efcb8cb9517e1c5039"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-f14fbc01240ce212b6cfd230ea9910b6fb80ce83-{{checksum ".buildcache/cache-keys/package-f14fbc01240ce212b6cfd230ea9910b6fb80ce83"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-a8f76a62481f2ca9cda207efcb8cb9517e1c5039.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-a8f76a62481f2ca9cda207efcb8cb9517e1c5039-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_a8f7_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-a8f76a62481f2ca9cda207efcb8cb9517e1c5039"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-a8f76a62481f2ca9cda207efcb8cb9517e1c5039.tar.gz
  test-go:
    docker:
    - image: circleci/golang:1.14.7-stretch
    resource_class: large
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  test-go-nightly:
    machine: true
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - save_cache:
        key: go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
        paths:
        - /tmp/go-cache
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.14.7
    - GO111MODULE: 'off'
    - GOTESTSUM_VERSION: 0.5.2
  netbsd_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 32a45ba7cca38d33e02be51ffe6078c9ad1478a0
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-32a45ba7cca38d33e02be51ffe6078c9ad1478a0-{{checksum ".buildcache/cache-keys/package-32a45ba7cca38d33e02be51ffe6078c9ad1478a0"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_0f2d_{{checksum ".buildcache/cache-keys/copy-source-0f2d5d7e5b6f274cf33995fe06756cb027b23014"}}
        - cache001-warm-go-build-vendor-cache_3c15_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-3c1544a4ea76eb74c3e608df589c47342c64695c"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-32a45ba7cca38d33e02be51ffe6078c9ad1478a0-{{checksum ".buildcache/cache-keys/package-32a45ba7cca38d33e02be51ffe6078c9ad1478a0"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-3c1544a4ea76eb74c3e608df589c47342c64695c.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-3c1544a4ea76eb74c3e608df589c47342c64695c-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_3c15_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-3c1544a4ea76eb74c3e608df589c47342c64695c"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-3c1544a4ea76eb74c3e608df589c47342c64695c.tar.gz
  openbsd_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 2499e2d82e7efa9908c881865926891ff419c577
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-2499e2d82e7efa9908c881865926891ff419c577-{{checksum ".buildcache/cache-keys/package-2499e2d82e7efa9908c881865926891ff419c577"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_2d1a_{{checksum ".buildcache/cache-keys/copy-source-2d1a5ab70e14becf161c94b9e8ef78da477e6eac"}}
        - cache001-warm-go-build-vendor-cache_16f5_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-16f506fa344cf76952581ca9c92695652d638359"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-2499e2d82e7efa9908c881865926891ff419c577-{{checksum ".buildcache/cache-keys/package-2499e2d82e7efa9908c881865926891ff419c577"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-16f506fa344cf76952581ca9c92695652d638359.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-16f506fa344cf76952581ca9c92695652d638359-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_16f5_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-16f506fa344cf76952581ca9c92695652d638359"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-16f506fa344cf76952581ca9c92695652d638359.tar.gz
  netbsd_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: d6eb414747fa37bf009fb14cb2abefccb32984b5
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-d6eb414747fa37bf009fb14cb2abefccb32984b5-{{checksum ".buildcache/cache-keys/package-d6eb414747fa37bf009fb14cb2abefccb32984b5"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_6be0_{{checksum ".buildcache/cache-keys/copy-source-6be0f2f5fbda68e9f4230daf6acbc139108f96a4"}}
        - cache001-warm-go-build-vendor-cache_f876_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-f876076a9fc5d9cb1953aa2dbaec4b9be06ba077"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-d6eb414747fa37bf009fb14cb2abefccb32984b5-{{checksum ".buildcache/cache-keys/package-d6eb414747fa37bf009fb14cb2abefccb32984b5"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-f876076a9fc5d9cb1953aa2dbaec4b9be06ba077.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-f876076a9fc5d9cb1953aa2dbaec4b9be06ba077-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_f876_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-f876076a9fc5d9cb1953aa2dbaec4b9be06ba077"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-f876076a9fc5d9cb1953aa2dbaec4b9be06ba077.tar.gz
  freebsd_arm_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 550db36b1278e18787b284e3195d66ee17c13735
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-550db36b1278e18787b284e3195d66ee17c13735-{{checksum ".buildcache/cache-keys/package-550db36b1278e18787b284e3195d66ee17c13735"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_1085_{{checksum ".buildcache/cache-keys/copy-source-10854cb8021169d122f58374562bac45d7a10d6e"}}
        - cache001-warm-go-build-vendor-cache_b763_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-b76326780d29031685bbd3038efe7d158d134132"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-550db36b1278e18787b284e3195d66ee17c13735-{{checksum ".buildcache/cache-keys/package-550db36b1278e18787b284e3195d66ee17c13735"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-b76326780d29031685bbd3038efe7d158d134132.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-b76326780d29031685bbd3038efe7d158d134132-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_b763_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-b76326780d29031685bbd3038efe7d158d134132"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-b76326780d29031685bbd3038efe7d158d134132.tar.gz
  windows_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: a352ff03d5a829952398fcabc99230b6a9488f95
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache001-package-a352ff03d5a829952398fcabc99230b6a9488f95-{{checksum ".buildcache/cache-keys/package-a352ff03d5a829952398fcabc99230b6a9488f95"}}
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-copy-source_ebf1_{{checksum ".buildcache/cache-keys/copy-source-ebf1da591a6cccdcc10038d731c9a223b719d54a"}}
        - cache001-warm-go-build-vendor-cache_296b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-296b20db286b5b99d90faf07c9c27af50d7b827c"}}
        - cache001-build-static-assets_bab1_{{checksum ".buildcache/cache-keys/build-static-assets-bab10123c5eab7d17baabe811ea253220f72b4d8"}}
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -C packages*.lock package
    - run:
        command: ls -lahR .buildcache/packages
    - save_cache:
        key: cache001-package-a352ff03d5a829952398fcabc99230b6a9488f95-{{checksum ".buildcache/cache-keys/package-a352ff03d5a829952398fcabc99230b6a9488f95"}}
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-296b20db286b5b99d90faf07c9c27af50d7b827c.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-296b20db286b5b99d90faf07c9c27af50d7b827c-save
    - save_cache:
        key: cache001-warm-go-build-vendor-cache_296b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-296b20db286b5b99d90faf07c9c27af50d7b827c"}}
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-296b20db286b5b99d90faf07c9c27af50d7b827c.tar.gz
  pre-flight-checks:
    docker:
    - image: circleci/buildpack-deps
    environment:
    - CCI_VERSION: 0.1.5691
    shell: /usr/bin/env bash -euo pipefail
    steps:
    - checkout
    - run:
        command: |
          export CCI_PATH=/tmp/circleci-cli/$CCI_VERSION
          mkdir -p $CCI_PATH
          NAME=circleci-cli_${CCI_VERSION}_${ARCH}
          URL=$BASE/v${CCI_VERSION}/${NAME}.tar.gz
          curl -sSL $URL \
            | tar --overwrite --strip-components=1 -xz -C $CCI_PATH "${NAME}/circleci"
          # Add circleci to the path for subsequent steps.
          echo "export PATH=$CCI_PATH:\$PATH" >> $BASH_ENV
          # Done, print some debug info.
          set -x
          . $BASH_ENV
          which circleci
          circleci version
        environment:
          ARCH: linux_amd64
          BASE: https://github.com/CircleCI-Public/circleci-cli/releases/download
        name: Install CircleCI CLI
    - run:
        command: make ci-verify
  cache-builder-images:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - setup_remote_docker
    - checkout
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        - cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        - cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        - cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        - cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        - cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        - cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
    - run:
        command: |
          if [ -f .buildcache/archives/06-build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0.tar.gz ]; then
            echo "Exact match found in cache, skipping build."
            circleci-agent step halt
          else
            echo "No exact match found, proceeding with build."
          fi
        name: Finish early if loaded exact match from cache.
    - run:
        command: |
          LAYER_SPEC_ID=06-build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0 make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: make -f packages*.lock/layer.mk 00-base-31734631257b3779d02665ecc77e06482f6104e8-image
    - run:
        command: make -f packages*.lock/layer.mk 01-install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a-image
    - run:
        command: make -f packages*.lock/layer.mk 02-install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394-image
    - run:
        command: make -f packages*.lock/layer.mk 03-set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10-image
    - run:
        command: make -f packages*.lock/layer.mk 04-install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454-image
    - run:
        command: make -f packages*.lock/layer.mk 05-ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea-image
    - run:
        command: make -f packages*.lock/layer.mk 06-build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0-image
    - run:
        command: make -f packages*.lock/layer.mk 06-build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0-save
    - save_cache:
        key: cache001-build-ui_b5ee_{{checksum ".buildcache/cache-keys/build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0"}}
        paths:
        - .buildcache/archives/06-build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0.tar.gz
    - run:
        command: mv .buildcache/archives/06-build-ui-b5ee0cfe233357f42f808a73c38b51276e2630e0.tar.gz .buildcache/archives/05-ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea.tar.gz
    - save_cache:
        key: cache001-ui-dependencies_31de_{{checksum ".buildcache/cache-keys/ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea"}}
        paths:
        - .buildcache/archives/05-ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea.tar.gz
    - run:
        command: mv .buildcache/archives/05-ui-dependencies-31deb73a3179758b5ddba202c6ec27f3010104ea.tar.gz .buildcache/archives/04-install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454.tar.gz
    - save_cache:
        key: cache001-install-yarn_0dd0_{{checksum ".buildcache/cache-keys/install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454"}}
        paths:
        - .buildcache/archives/04-install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454.tar.gz
    - run:
        command: mv .buildcache/archives/04-install-yarn-0dd03ba30a75bc7b6bb05d9fadff96a844be0454.tar.gz .buildcache/archives/03-set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10.tar.gz
    - save_cache:
        key: cache001-set-workdir_1792_{{checksum ".buildcache/cache-keys/set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10"}}
        paths:
        - .buildcache/archives/03-set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10.tar.gz
    - run:
        command: mv .buildcache/archives/03-set-workdir-17921c19d37884b73fc9ca8dd83e0fc552532b10.tar.gz .buildcache/archives/02-install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394.tar.gz
    - save_cache:
        key: cache001-install-go-tools_cbd7_{{checksum ".buildcache/cache-keys/install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394"}}
        paths:
        - .buildcache/archives/02-install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394.tar.gz
    - run:
        command: mv .buildcache/archives/02-install-go-tools-cbd71349f0f0fb3f1cb812c9459fee307caac394.tar.gz .buildcache/archives/01-install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a.tar.gz
    - save_cache:
        key: cache001-install-go_5172_{{checksum ".buildcache/cache-keys/install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a"}}
        paths:
        - .buildcache/archives/01-install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a.tar.gz
    - run:
        command: mv .buildcache/archives/01-install-go-5172940f5c97a0e1f9d65002c64424c46f95bb8a.tar.gz .buildcache/archives/00-base-31734631257b3779d02665ecc77e06482f6104e8.tar.gz
    - save_cache:
        key: cache001-base_3173_{{checksum ".buildcache/cache-keys/base-31734631257b3779d02665ecc77e06482f6104e8"}}
        paths:
        - .buildcache/archives/00-base-31734631257b3779d02665ecc77e06482f6104e8.tar.gz
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - PRODUCT_REVISION: ''
  test-go-race-remote-docker:
    docker:
    - image: circleci/golang:1.14.7-stretch
    resource_class: xlarge
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/go/src/github.com/hashicorp/vault/test-results .
          docker cp testcontainer:/tmp/gocache /tmp/go-cache
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
workflows:
  build-standalone:
    jobs:
    - cache-builder-images
    - darwin_386_package:
        requires:
        - cache-builder-images
    - darwin_amd64_package:
        requires:
        - cache-builder-images
    - freebsd_386_package:
        requires:
        - cache-builder-images
    - freebsd_amd64_package:
        requires:
        - cache-builder-images
    - freebsd_arm_package:
        requires:
        - cache-builder-images
    - linux_386_package:
        requires:
        - cache-builder-images
    - linux_amd64_package:
        requires:
        - cache-builder-images
    - linux_arm_package:
        requires:
        - cache-builder-images
    - linux_arm64_package:
        requires:
        - cache-builder-images
    - netbsd_386_package:
        requires:
        - cache-builder-images
    - netbsd_amd64_package:
        requires:
        - cache-builder-images
    - openbsd_386_package:
        requires:
        - cache-builder-images
    - openbsd_amd64_package:
        requires:
        - cache-builder-images
    - solaris_amd64_package:
        requires:
        - cache-builder-images
    - windows_386_package:
        requires:
        - cache-builder-images
    - windows_amd64_package:
        requires:
        - cache-builder-images
    - bundle-releases:
        requires:
        - darwin_386_package
        - darwin_amd64_package
        - freebsd_386_package
        - freebsd_amd64_package
        - freebsd_arm_package
        - linux_386_package
        - linux_amd64_package
        - linux_arm_package
        - linux_arm64_package
        - netbsd_386_package
        - netbsd_amd64_package
        - openbsd_386_package
        - openbsd_amd64_package
        - solaris_amd64_package
        - windows_386_package
        - windows_amd64_package
  ci:
    jobs:
    - pre-flight-checks
    - install-ui-dependencies:
        requires:
        - pre-flight-checks
    - build-go-dev:
        requires:
        - pre-flight-checks
    - test-ui:
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-ui-browserstack:
        filters:
          branches:
            ignore: /pull\/[0-9]+/
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-go:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-remote-docker:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-race:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-race-remote-docker:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - website-docker-image:
        filters:
          branches:
            only:
            - master
        context: vault-docs
    - algolia-index:
        filters:
          branches:
            only:
            - stable-website
        context: vault-docs
  nightly-cachebuilder:
    jobs:
    - pre-flight-checks
    - test-go-nightly
    triggers:
    - schedule:
        cron: 0 9 * * *
        filters:
          branches:
            only:
            - master
  version: 2
